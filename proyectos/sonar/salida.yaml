---
# Source: sonarqube/charts/postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  name: release-name-postgresql
  namespace: ivan
---
# Source: sonarqube/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
automountServiceAccountToken: false
---
# Source: sonarqube/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  namespace: ivan
type: Opaque
data:
  postgresql-postgres-password: "WDVrdGFFakRUdw=="
  postgresql-password: "c29uYXJQYXNz"
---
# Source: sonarqube/templates/secret.yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-sonarqube-monitoring-passcode
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
type: Opaque
data:
  SONAR_WEB_SYSTEMPASSCODE: "ZGVmaW5lX2l0"
---
# Source: sonarqube/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-config
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
data:
  sonar.properties: |
---
# Source: sonarqube/templates/init-fs.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-init-fs
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
data:
  init_fs.sh: |-
    chown -R 1000:0 /opt/sonarqube
---
# Source: sonarqube/templates/init-sysctl.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-init-sysctl
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
data:
  init_sysctl.sh: |-
    if [[ "$(sysctl -n vm.max_map_count)" -lt 524288 ]]; then
      sysctl -w vm.max_map_count=524288
    fi
    if [[ "$(sysctl -n fs.file-max)" -lt 131072 ]]; then
      sysctl -w fs.file-max=131072
    fi
    if [[ "$(ulimit -n)" != "unlimited" ]]; then
      if [[ "$(ulimit -n)" -lt 131072 ]]; then
        echo "ulimit -n 131072"
        ulimit -n 131072
      fi
    fi
    if [[ "$(ulimit -u)" != "unlimited" ]]; then
      if [[ "$(ulimit -u)" -lt 8192 ]]; then
        echo "ulimit -u 8192"
        ulimit -u 8192
      fi
    fi
---
# Source: sonarqube/templates/install-plugins.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-install-plugins
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
data:
  install_plugins.sh: |-
---
# Source: sonarqube/templates/jdbc-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-sonarqube-jdbc-config
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
data:
  SONAR_JDBC_USERNAME: "sonarUser"
  SONAR_JDBC_URL: "jdbc:postgresql://release-name-postgresql:5432/sonarDB"
---
# Source: sonarqube/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "5Gi"
---
# Source: sonarqube/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: ivan
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
---
# Source: sonarqube/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: ivan
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    role: primary
---
# Source: sonarqube/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: sonarqube
    release: release-name
---
# Source: sonarqube/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.15.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: ivan
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      role: primary
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.15.0
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: release-name
                    app.kubernetes.io/component: primary
                namespaces:
                  - "ivan"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      serviceAccountName: release-name-postgresql
      containers:
        - name: release-name-postgresql
          image: docker.io/bitnami/postgresql:11.14.0-debian-10-r22
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 2
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-postgres-password
            - name: POSTGRES_USER
              value: "sonarUser"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "sonarDB"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "sonarUser" -d "dbname=sonarDB" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "20Gi"
---
# Source: sonarqube/templates/sonarqube-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
    app.kubernetes.io/name: sonarqube-release-name-sonarqube
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: release-name-sonarqube
    app.kubernetes.io/version: "10.6.0-community"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: release-name-sonarqube
  selector:
    matchLabels:
      app: sonarqube
      release: release-name
  template:
    metadata:
      annotations:
        checksum/config: 3f6c6b8b6538710efd71b2fd04914a4ea41c85d13f238fa5bd522c10d9bf66c3
        checksum/init-fs: dc69701cd5c320061169c38777f2e06ba460fca339c1bf01b2eb6ef1c5f4e482
        checksum/init-sysctl: 693ca5854eb3e25c8a35b68e43ef6806de762bfb10aeaeb07b87b2bd80e7f396
        checksum/plugins: da1c5f7421c8769cbee9a1a104e3b2de9fb0128da69affb6f6ac81c3eaf53e1c
        checksum/secret: b5b3b0ce5db0d934c7a63b614498f2110fa2508bd5779fdb4e8d5e5f64e1d08d
      labels:
        app: sonarqube
        release: release-name
    spec:
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 0
      initContainers:
        - name: "wait-for-db"
          image: sonarqube:10.6.0-community
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          command: ["/bin/bash", "-c"]
          args: ['set -o pipefail;for i in {1..200};do (echo > /dev/tcp/release-name-postgresql/5432) && exit 0; sleep 2;done; exit 1']
        - name: init-sysctl
          image: sonarqube:10.6.0-community
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
            runAsUser: 0
          command: ["/bin/bash", "-e", "/tmp/scripts/init_sysctl.sh"]
          volumeMounts:
            - name: init-sysctl
              mountPath: /tmp/scripts/
          env:
            - name: SONAR_WEB_CONTEXT
              value: "/"
            - name: SONAR_WEB_JAVAOPTS
              value: ""
            - name: SONAR_CE_JAVAOPTS
              value: ""
      containers:
        - name: sonarqube
          image: sonarqube:10.6.0-community
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          resources:
            limits:
              cpu: 800m
              ephemeral-storage: 512000M
              memory: 1Mi
            requests:
              cpu: 100m
              ephemeral-storage: 1536M
              memory: 1Mi
          env:
            - name: SONAR_HELM_CHART_VERSION
              value: 10.6.0_3033
            - name: SONAR_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: release-name-postgresql
                  key: postgresql-password
            - name: SONAR_WEB_SYSTEMPASSCODE
              valueFrom:
                secretKeyRef:
                  name: release-name-sonarqube-monitoring-passcode
                  key: SONAR_WEB_SYSTEMPASSCODE
            - name: SONAR_WEB_CONTEXT
              value: "/"
            - name: SONAR_WEB_JAVAOPTS
              value: ""
            - name: SONAR_CE_JAVAOPTS
              value: ""
          envFrom:
            - configMapRef:
                name: release-name-sonarqube-jdbc-config
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                wget --no-proxy --quiet -O /dev/null --timeout=1 --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE" "http://localhost:9000/api/system/liveness"
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                #!/bin/bash
                # A Sonarqube container is considered ready if the status is UP, DB_MIGRATION_NEEDED or DB_MIGRATION_RUNNING
                # status about migration are added to prevent the node to be kill while sonarqube is upgrading the database.
                if wget --no-proxy -qO- http://localhost:9000/api/system/status | grep -q -e '"status":"UP"' -e '"status":"DB_MIGRATION_NEEDED"' -e '"status":"DB_MIGRATION_RUNNING"'; then
                  exit 0
                fi
                exit 1
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 1
          startupProbe:
            httpGet:
              scheme: HTTP
              path: /api/system/status
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 24
            timeoutSeconds: 1
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsGroup: 0
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /opt/sonarqube/data
              name: sonarqube
              subPath: data
            - mountPath: /opt/sonarqube/temp
              name: sonarqube
              subPath: temp
            - mountPath: /opt/sonarqube/logs
              name: sonarqube
              subPath: logs
            - mountPath: /tmp
              name: tmp-dir
            - mountPath: /opt/sonarqube/extensions
              name: sonarqube
              subPath: extensions
      nodeSelector:
        sonarqube: "true"
      serviceAccountName: release-name-sonarqube
      volumes:
        - name: init-sysctl
          configMap:
            name: release-name-sonarqube-init-sysctl
            items:
              - key: init_sysctl.sh
                path: init_sysctl.sh
        - name: sonarqube
          persistentVolumeClaim:
            claimName: release-name-sonarqube
        - name : tmp-dir
          emptyDir:
            {}
---
# Source: sonarqube/templates/route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
spec:
  to:
    kind: Service
    name: release-name-sonarqube
  port:
    targetPort: http
  tls:
    termination: edge
---
# Source: sonarqube/templates/tests/sonarqube-test.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-ui-test"
  annotations:
    "helm.sh/hook": test-success
  labels:
    app: sonarqube
    chart: sonarqube-10.6.0_3033
    release: release-name
    heritage: Helm
spec:
  automountServiceAccountToken: false
  containers:
    - name: release-name-ui-test
      image: "sonarqube:10.6.0-community"
      imagePullPolicy: IfNotPresent
      command: ['wget']
      args: [
        '--retry-connrefused',
        '--waitretry=1',
        '--timeout=5',
        '-t',
        '12',
        '-qO-',
        'release-name-sonarqube:9000/api/system/status'
        ]
      resources:
        limits:
          cpu: 500m
          ephemeral-storage: 1000M
          memory: 200M
        requests:
          cpu: 500m
          ephemeral-storage: 100M
          memory: 200M
  restartPolicy: Never
---
# Source: sonarqube/templates/sonarqube-scc.yaml
# This SCC allows any user ID but restricts capabilties and host access
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  annotations:
    kubernetes.io/description: "allows pod to run as root, privileged and run sysctl"
    "helm.sh/hook": pre-install
  name: release-name-privileged-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: true
allowPrivilegeEscalation: true
allowedCapabilities: []
allowedFlexVolumes: []
allowedUnsafeSysctls: []
defaultAddCapabilities: []
defaultAllowPrivilegeEscalation: true
fsGroup:
  type: RunAsAny
readOnlyRootFilesystem: false
requiredDropCapabilities:
- KILL
- MKNOD
- SETUID
- SETGID
runAsUser:
  type: RunAsAny
# This can be customized for your host machine
seLinuxContext:
  type: MustRunAs
# seLinuxOptions:
#   level:
#   user:
#   role:
#   type:
supplementalGroups:
  type: RunAsAny
# This can be customized for your host machine
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
# If you want a priority on your SCC -- set for a value more than 0
priority: 11
users:
- system:serviceaccount:ivan:release-name-sonarqube
- system:serviceaccount:ivan:release-name-postgresql
